from read_data import train, test, mask
import numpy as np
import matplotlib.pyplot as plt
from Regression import Regression
import itertools
from mpl_toolkits.mplot3d import Axes3D

# *** item 1 ***
print("*** Item 1 ***")
print("Usando X=[carga] e y=[vo2max]")
X = np.array([[x] for x in train['carga']])
y = train['vo2max'].as_matrix()

X_test = np.asarray([[x] for x in test['carga']])
y_test = np.asarray(test['vo2max'])

degress = [1, 2, 3]
for d in degress:
	model = Regression(degree=d)
	W = model.fit(X, y)
	
	y_pred = model.predict(X_test)
	mse_error = model.mse_error(y_test, y_pred)
	score = model.score(y_test, y_pred)
	nll = model.NLL(X, y)

	print("grau " + str(d) + ": \n\tW = " + str([str(round(x, 5)) for x in W]) + "\n\tmse_error = " + str(mse_error) + "\n\tscore = " + str(score) + "\n\tNLL = " + str(nll))

	plt.cla()
	plt.title("Degree d = " + str(d))
	plt.ylabel('vo2max')
	plt.xlabel('carga')
	x_plot = [[x] for x in np.linspace(X.min(),X.max(),1000)]
	y_plot = model.predict(x_plot)

	pl1, = plt.plot(X, y, 'g.', label='Training data')
	pl2, = plt.plot(x_plot ,y_plot, 'b-', label='Function generated by W')
	plt.legend(handles=[pl1, pl2])
	plt.show()

# *** item 2 ***
print("*** Item 2 ***")
print("Usando X=[peso,carga] e y=[vo2max]")
X = train[['peso','carga']].as_matrix()
y = train['vo2max'].as_matrix()

X_test = test[['peso','carga']].as_matrix()
y_test = test['vo2max'].as_matrix()

degress = [1, 2, 3]
for d in degress:
	model = Regression(degree=d)
	W = model.fit(X, y)
	
	y_pred = model.predict(X_test)
	mse_error = model.mse_error(y_test, y_pred)
	score = model.score(y_test, y_pred)
	nll = model.NLL(X, y)

	print("grau " + str(d) + ": \n\tW = " + str([str(round(x, 5)) for x in W]) + "\n\tmse_error = " + str(mse_error) + "\n\tscore = " + str(score) + "\n\tNLL = " + str(nll))

	plt3d = plt.figure().gca(projection='3d')
	x1_plot = np.linspace(X[:,0].min(),X[:,0].max(),10)
	x2_plot = np.linspace(X[:,1].min(),X[:,1].max(),10)

	xx, yy = np.meshgrid(x1_plot, x2_plot)
	z = list(itertools.product(x1_plot, x2_plot))
	zz = model.predict(z)
	zz = np.reshape(zz, (x2_plot.shape[0], x1_plot.shape[0]))

	plt3d.plot_surface(xx,yy,zz.transpose())
	plt3d.plot(X[:,0],X[:,1],y, 'g.')
	plt.show()


# *** item 3 ***
print("*** Item 3 ***")
print("Usando X=[peso,carga,idade] e y=[vo2max]")
X = train[['peso','carga','idade']].as_matrix()
y = train['vo2max'].as_matrix()

X_test = test[['peso','carga','idade']].as_matrix()
y_test = test['vo2max'].as_matrix()

degress = [1, 2, 3]
for d in degress:
	model = Regression(degree=d)
	W = model.fit(X, y)
	
	y_pred = model.predict(X_test)
	mse_error = model.mse_error(y_test, y_pred)
	score = model.score(y_test, y_pred)
	nll = model.NLL(X, y)

	print("grau " + str(d) + ": \n\tW = " + str([str(round(x, 5)) for x in W]) + "\n\tmse_error = " + str(mse_error) + "\n\tscore = " + str(score) + "\n\tNLL = " + str(nll))